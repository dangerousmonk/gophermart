// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/dangerousmonk/gophermart/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetAccrual mocks base method.
func (m *MockService) GetAccrual(orderNumber string) (*models.AccrualExternal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccrual", orderNumber)
	ret0, _ := ret[0].(*models.AccrualExternal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccrual indicates an expected call of GetAccrual.
func (mr *MockServiceMockRecorder) GetAccrual(orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccrual", reflect.TypeOf((*MockService)(nil).GetAccrual), orderNumber)
}

// GetBalance mocks base method.
func (m *MockService) GetBalance(ctx context.Context, userID int) (models.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(models.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockServiceMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockService)(nil).GetBalance), ctx, userID)
}

// GetUserOrders mocks base method.
func (m *MockService) GetUserOrders(ctx context.Context, userID int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockServiceMockRecorder) GetUserOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockService)(nil).GetUserOrders), ctx, userID)
}

// GetUserWithdrawals mocks base method.
func (m *MockService) GetUserWithdrawals(ctx context.Context, userID int) ([]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockServiceMockRecorder) GetUserWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockService)(nil).GetUserWithdrawals), ctx, userID)
}

// LoginUser mocks base method.
func (m *MockService) LoginUser(ctx context.Context, req *models.UserRequest) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, req)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockServiceMockRecorder) LoginUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockService)(nil).LoginUser), ctx, req)
}

// MakeWithdrawal mocks base method.
func (m *MockService) MakeWithdrawal(ctx context.Context, userID int, wdReq models.MakeWithdrawalReq) (models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeWithdrawal", ctx, userID, wdReq)
	ret0, _ := ret[0].(models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeWithdrawal indicates an expected call of MakeWithdrawal.
func (mr *MockServiceMockRecorder) MakeWithdrawal(ctx, userID, wdReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeWithdrawal", reflect.TypeOf((*MockService)(nil).MakeWithdrawal), ctx, userID, wdReq)
}

// Ping mocks base method.
func (m *MockService) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockServiceMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockService)(nil).Ping), ctx)
}

// ProccessPendingOrders mocks base method.
func (m *MockService) ProccessPendingOrders(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProccessPendingOrders", ctx)
}

// ProccessPendingOrders indicates an expected call of ProccessPendingOrders.
func (mr *MockServiceMockRecorder) ProccessPendingOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProccessPendingOrders", reflect.TypeOf((*MockService)(nil).ProccessPendingOrders), ctx)
}

// RegisterUser mocks base method.
func (m *MockService) RegisterUser(ctx context.Context, req *models.UserRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockServiceMockRecorder) RegisterUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockService)(nil).RegisterUser), ctx, req)
}

// StartAccrualWorker mocks base method.
func (m *MockService) StartAccrualWorker(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartAccrualWorker", ctx)
}

// StartAccrualWorker indicates an expected call of StartAccrualWorker.
func (mr *MockServiceMockRecorder) StartAccrualWorker(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAccrualWorker", reflect.TypeOf((*MockService)(nil).StartAccrualWorker), ctx)
}

// UploadOrder mocks base method.
func (m *MockService) UploadOrder(ctx context.Context, userID int, orderNum string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadOrder", ctx, userID, orderNum)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadOrder indicates an expected call of UploadOrder.
func (mr *MockServiceMockRecorder) UploadOrder(ctx, userID, orderNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadOrder", reflect.TypeOf((*MockService)(nil).UploadOrder), ctx, userID, orderNum)
}
