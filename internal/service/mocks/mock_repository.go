// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/dangerousmonk/gophermart/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, u *models.UserRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, u)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, u)
}

// GetBalance mocks base method.
func (m *MockRepository) GetBalance(ctx context.Context, userID int) (models.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(models.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockRepositoryMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockRepository)(nil).GetBalance), ctx, userID)
}

// GetNewOrders mocks base method.
func (m *MockRepository) GetNewOrders(ctx context.Context) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewOrders", ctx)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewOrders indicates an expected call of GetNewOrders.
func (mr *MockRepositoryMockRecorder) GetNewOrders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewOrders", reflect.TypeOf((*MockRepository)(nil).GetNewOrders), ctx)
}

// GetOrderByNumber mocks base method.
func (m *MockRepository) GetOrderByNumber(ctx context.Context, orderNum string) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByNumber", ctx, orderNum)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByNumber indicates an expected call of GetOrderByNumber.
func (mr *MockRepositoryMockRecorder) GetOrderByNumber(ctx, orderNum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByNumber", reflect.TypeOf((*MockRepository)(nil).GetOrderByNumber), ctx, orderNum)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(ctx context.Context, login string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), ctx, login)
}

// GetUserOrders mocks base method.
func (m *MockRepository) GetUserOrders(ctx context.Context, userID int) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserOrders", ctx, userID)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserOrders indicates an expected call of GetUserOrders.
func (mr *MockRepositoryMockRecorder) GetUserOrders(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserOrders", reflect.TypeOf((*MockRepository)(nil).GetUserOrders), ctx, userID)
}

// GetUserWithdrawals mocks base method.
func (m *MockRepository) GetUserWithdrawals(ctx context.Context, userID int) ([]models.Withdrawal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithdrawals", ctx, userID)
	ret0, _ := ret[0].([]models.Withdrawal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithdrawals indicates an expected call of GetUserWithdrawals.
func (mr *MockRepositoryMockRecorder) GetUserWithdrawals(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithdrawals", reflect.TypeOf((*MockRepository)(nil).GetUserWithdrawals), ctx, userID)
}

// IsNoRows mocks base method.
func (m *MockRepository) IsNoRows(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNoRows", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNoRows indicates an expected call of IsNoRows.
func (mr *MockRepositoryMockRecorder) IsNoRows(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNoRows", reflect.TypeOf((*MockRepository)(nil).IsNoRows), err)
}

// IsUniqueViolation mocks base method.
func (m *MockRepository) IsUniqueViolation(err error, constraint string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUniqueViolation", err, constraint)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUniqueViolation indicates an expected call of IsUniqueViolation.
func (mr *MockRepositoryMockRecorder) IsUniqueViolation(err, constraint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUniqueViolation", reflect.TypeOf((*MockRepository)(nil).IsUniqueViolation), err, constraint)
}

// MakeAccrualToBalance mocks base method.
func (m *MockRepository) MakeAccrualToBalance(ctx context.Context, order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeAccrualToBalance", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeAccrualToBalance indicates an expected call of MakeAccrualToBalance.
func (mr *MockRepositoryMockRecorder) MakeAccrualToBalance(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeAccrualToBalance", reflect.TypeOf((*MockRepository)(nil).MakeAccrualToBalance), ctx, order)
}

// Ping mocks base method.
func (m *MockRepository) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRepositoryMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRepository)(nil).Ping), ctx)
}

// UploadOrder mocks base method.
func (m *MockRepository) UploadOrder(ctx context.Context, orderNum string, userID int, status models.OrderStatus) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadOrder", ctx, orderNum, userID, status)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadOrder indicates an expected call of UploadOrder.
func (mr *MockRepositoryMockRecorder) UploadOrder(ctx, orderNum, userID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadOrder", reflect.TypeOf((*MockRepository)(nil).UploadOrder), ctx, orderNum, userID, status)
}

// WithdrawFromBalance mocks base method.
func (m *MockRepository) WithdrawFromBalance(ctx context.Context, orderNum string, userID int, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawFromBalance", ctx, orderNum, userID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawFromBalance indicates an expected call of WithdrawFromBalance.
func (mr *MockRepositoryMockRecorder) WithdrawFromBalance(ctx, orderNum, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawFromBalance", reflect.TypeOf((*MockRepository)(nil).WithdrawFromBalance), ctx, orderNum, userID, amount)
}
